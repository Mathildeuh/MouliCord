import discord
from discord.ext import commands, tasks
import os
import time
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from epitech_api import EpitechAPI
from token_refresher import auto_refresh_token

# Charger les variables d'environnement
load_dotenv()

# Variables globales pour la gestion des tokens
current_token = None
epitech_api = None

# --- Journalisation unifi√©e ---
def _log_info(message: str):
    print(f"[INFO] {message}")

def _log_warn(message: str):
    print(f"[WARN] {message}")

def _log_error(message: str):
    print(f"[ERREUR] {message}")

def _log_ok(message: str):
    print(f"[OK] {message}")

def _propagate_api_to_cogs():
    """Propage l'instance EpitechAPI actualis√©e aux cogs (slash commands)."""
    try:
        from discord.ext import commands as _commands  # local import to avoid type checkers
        if bot:
            slash_commands_cog = bot.get_cog('MouliCordSlashCommands')
            if slash_commands_cog and hasattr(slash_commands_cog, 'update_epitech_api'):
                slash_commands_cog.update_epitech_api(epitech_api)
                _log_info("API propag√©e aux commandes slash")
    except Exception as e:
        _log_warn(f"Impossible de propager l'API aux cogs: {e}")

# (Gestion du topic supprim√©e)

def get_fresh_token():
    """R√©cup√®re un nouveau token depuis Epitech avec retry logic"""
    global current_token, epitech_api
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            _log_info(f"R√©cup√©ration d'un nouveau token (tentative {attempt + 1}/{max_retries})‚Ä¶")
            result = auto_refresh_token(headless=True, update_env=False)
            
            if result.get("success") and result.get("token"):
                new_token = result["token"]
                
                # Valider le format du token avant de l'utiliser
                if not new_token or not isinstance(new_token, str):
                    _log_error("Token r√©cup√©r√© invalide (vide ou mauvais type)")
                    if attempt < max_retries - 1:
                        _log_info("Nouvelle tentative dans 5s‚Ä¶")
                        time.sleep(5)
                        continue
                    return False
                
                # Nettoyer le token (retirer "Bearer " si pr√©sent)
                clean_token = new_token.strip()
                if clean_token.startswith("Bearer "):
                    clean_token = clean_token[7:].strip()
                
                # V√©rifier que c'est un JWT valide (3 parties s√©par√©es par des points)
                parts = clean_token.split('.')
                if len(parts) != 3:
                    _log_error(f"Token JWT invalide: {len(parts)} parties au lieu de 3")
                    if attempt < max_retries - 1:
                        _log_info("Nouvelle tentative dans 10s‚Ä¶")
                        time.sleep(10)
                        continue
                    return False
                
                # Tester la cr√©ation de l'API avec le nouveau token
                try:
                    test_api = EpitechAPI(clean_token, "results_history.json")
                    token_info = test_api.get_token_info()
                    
                    if "error" in token_info:
                        _log_error(f"Token invalide: {token_info['error']}")
                        if attempt < max_retries - 1:
                            _log_info("Nouvelle tentative dans 10s‚Ä¶")
                            time.sleep(10)
                            continue
                        return False
                    
                    if token_info.get("is_expired", True):
                        _log_error("Token r√©cup√©r√© d√©j√† expir√©")
                        if attempt < max_retries - 1:
                            _log_info("Nouvelle tentative dans 5s‚Ä¶")
                            time.sleep(5)
                            continue
                        return False
                    
                    # Token valide, l'utiliser
                    current_token = clean_token
                    epitech_api = test_api
                    
                    _log_ok("Nouveau token r√©cup√©r√© et valid√© (validit√© ~1h)")
                    # Propager imm√©diatement aux cogs pour que toutes les commandes utilisent le nouveau token
                    _propagate_api_to_cogs()
                    return True
                    
                except Exception as e:
                    _log_error(f"Erreur lors de la validation du token: {e}")
                    if attempt < max_retries - 1:
                        _log_info("Nouvelle tentative dans 10s‚Ä¶")
                        time.sleep(10)
                        continue
                    return False
                
            else:
                _log_error(f"√âchec de r√©cup√©ration du token: {result.get('error', 'Erreur inconnue')}")
                if attempt < max_retries - 1:
                    _log_info("Nouvelle tentative dans 15s‚Ä¶")
                    time.sleep(15)
                    continue
                return False
                
        except Exception as e:
            _log_error(f"Erreur lors de la r√©cup√©ration du token (tentative {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                _log_info("Nouvelle tentative dans 15s‚Ä¶")
                time.sleep(15)
                continue
            return False
    
    _log_error("√âchec d√©finitif apr√®s 3 tentatives")
    return False

def init_token_from_env():
    """(D√©sactiv√©) Toujours g√©n√©rer un token au d√©marrage; ne jamais lire depuis .env"""
    return False

def ensure_valid_token():
    """S'assure que le token est valide, le renouvelle si n√©cessaire"""
    global current_token, epitech_api
    
    # Toujours g√©n√©rer un token si aucun n'est disponible
    if not current_token or not epitech_api:
        return get_fresh_token()
    
    try:
        # V√©rifier si le token actuel est encore valide
        token_info = epitech_api.get_token_info()
        
        if token_info.get("is_expired", True):
            print("‚è∞ Token expir√© (dur√©e de vie: 1h), renouvellement automatique...")
            return get_fresh_token()
        
        # Token valide
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la v√©rification du token: {e}")
        print("üîÑ Tentative de r√©cup√©ration d'un nouveau token...")
        return get_fresh_token()

def validate_environment():
    """Valide que toutes les variables d'environnement n√©cessaires sont pr√©sentes"""
    required_vars = {
        'DISCORD_BOT_TOKEN': 'Token du bot Discord',
        'CHANNEL_ID': 'ID du canal Discord'
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value or value.strip() == '':
            missing_vars.append(f"{var} ({description})")
    
    if missing_vars:
        _log_error("Variables d'environnement manquantes:")
        for var in missing_vars:
            print(f"   ‚Ä¢ {var}")
        print("\nConseil: cr√©ez un fichier .env avec:")
        print("   DISCORD_BOT_TOKEN=your_bot_token")
        print("   CHANNEL_ID=your_channel_id")
        print("\nNote: le token Epitech est g√©n√©r√© automatiquement (validit√© ~1h)")
        return False
    return True

# V√©rifier les variables d'environnement au d√©marrage
if not validate_environment():
    exit(1)

# Configuration du bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)


# Variables globales - l'API sera initialis√©e apr√®s r√©cup√©ration du token
channel_id = int(os.getenv('CHANNEL_ID', '0'))


class MouliCordBot:
    """Bot Discord pour les r√©sultats de la moulinette Epitech - Tokens auto-renouvel√©s toutes les heures"""
    
    def __init__(self):
        print("üöÄ MouliCord v2.0 - Full Slash Commands Edition")
        print("üïí Surveillance initialis√©e avec stockage JSON")
    
    async def send_to_channel(self, message: str, embed: discord.Embed | None = None):
        """Envoie un message dans le canal configur√©"""
        channel = bot.get_channel(channel_id)
        if channel and isinstance(channel, discord.TextChannel):
            if embed:
                # Permettre les mentions @everyone
                await channel.send(message, embed=embed, allowed_mentions=discord.AllowedMentions(everyone=True))
            else:
                await channel.send(message, allowed_mentions=discord.AllowedMentions(everyone=True))
        else:
            print(f"Canal {channel_id} non trouv√© ou non compatible")
    
    async def send_moulinette_notification(self, result: dict):
        """Envoie une notification pour un nouveau r√©sultat de moulinette"""
        try:
            # Extraire les informations du r√©sultat
            project_name = result.get("project", {}).get("name", "Projet inconnu")
            project_slug = result.get("project", {}).get("slug", "")
            module_code = result.get("project", {}).get("module", {}).get("code", "G-CPE-100")
            test_run_id = result.get("results", {}).get("testRunId", "")
            date = result.get("date", "")
            
            # Construire l'URL vers le projet sur myresults.epitest.eu
            project_url = None
            if project_slug and test_run_id:
                project_url = f"https://myresults.epitest.eu/index.html#d/2025/{module_code}/{project_slug}/{test_run_id}"
            
            # Calculer les vrais scores depuis la structure skills
            skills = result.get("results", {}).get("skills", {})
            passed = 0
            total = 0
            
            for skill_name, skill_data in skills.items():
                skill_passed = skill_data.get("passed", 0)
                skill_count = skill_data.get("count", 0)
                passed += skill_passed
                total += skill_count
            
            percentage = round((passed / total * 100) if total > 0 else 0, 1)
            
            # D√©terminer la couleur et l'emoji selon le score
            if percentage >= 100:
                color = discord.Color.green()
                emoji = "‚úÖ"
                status = "PARFAIT"
            elif percentage >= 80:
                color = discord.Color.orange()
                emoji = "üü°"
                status = "BIEN"
            elif percentage >= 50:
                color = discord.Color.orange()
                emoji = "üü†"
                status = "MOYEN"
            else:
                color = discord.Color.red()
                emoji = "‚ùå"
                status = "√âCHEC"
            
            # Cr√©er l'embed de notification avec URL cliquable
            title = f"{emoji} Nouvelle Moulinette - {project_name}"
            
            embed = discord.Embed(
                title=title,
                url=project_url if project_url else None,  # Rend tout le titre cliquable
                description=f"**{status}** ‚Ä¢ {passed}/{total} tests ({percentage}%)",
                color=color,
                timestamp=datetime.fromisoformat(date.replace('Z', '+00:00')) if date else datetime.now()
            )
            
            embed.add_field(
                name="üìä R√©sultats",
                value=f"‚Ä¢ Tests pass√©s: **{passed}/{total}** \n‚Ä¢ Pourcentage: **{percentage}%**",
                inline=True
            )
            
            if date:
                embed.add_field(
                    name="üïí Date",
                    value=f"<t:{int(datetime.fromisoformat(date.replace('Z', '+00:00')).timestamp())}:R>",
                    inline=True
                )
            
            # Informations suppl√©mentaires avec lien vers le projet
            if project_url:
                embed.add_field(
                    name="",
                    value=f"üîó [Voir sur EpiTest]({project_url})",
                    inline=False
                )
            elif project_slug:
                embed.add_field(
                    name="üîó Projet",
                    value=f"`{project_slug}`",
                    inline=True
                )
            
            embed.set_footer(text="MouliCord v2.0 ‚Ä¢ Surveillance automatique")
            
            # Envoyer la notification avec @everyone pour les nouveaux r√©sultats
            message = f"<@&1424827053508657252> üö® **NOUVEAU R√âSULTAT DE MOULINETTE !**"
            
            await self.send_to_channel(message, embed)
            print(f"üì® Notification envoy√©e pour: {project_name} ({percentage}%)")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi de la notification: {e}")


moulibot = MouliCordBot()


@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© quand le bot est pr√™t"""
    _log_ok(f"Connect√© √† Discord en tant que {bot.user}")
    _log_info(f"Canal configur√©: {channel_id}")
    # (Topic du salon d√©sactiv√©)
    
    # R√©cup√©ration automatique du token au d√©marrage
    # Charger les Slash Commands d'abord
    try:
        await bot.load_extension('slash_commands')
        _log_ok('Commandes slash charg√©es')
    except Exception as e:
        _log_error(f"Erreur lors du chargement des commandes slash: {e}")
    
    _log_info("Initialisation du token Epitech‚Ä¶")
    if not ensure_valid_token():
        _log_error("Impossible de r√©cup√©rer le token Epitech")
        _log_warn("Le bot continue sans les fonctionnalit√©s Epitech")
    else:
        _log_ok("Token Epitech configur√©")
        
        # Mettre √† jour l'API dans le Cog des slash commands
        try:
            slash_commands_cog = bot.get_cog('MouliCordSlashCommands')
            if slash_commands_cog and hasattr(slash_commands_cog, 'update_epitech_api'):
                slash_commands_cog.update_epitech_api(epitech_api)
                _log_info("API mise √† jour dans les commandes slash")
        except Exception as e:
            _log_warn(f"Impossible de mettre √† jour l'API dans les commandes: {e}")
    
    # Synchroniser les commandes avec Discord
    try:
        synced = await bot.tree.sync()
        _log_ok(f"{len(synced)} commandes slash synchronis√©es")
    except Exception as e:
        _log_error(f"Erreur lors de la synchronisation des commandes: {e}")
    
    # V√©rification imm√©diate au d√©marrage pour les nouveaux r√©sultats
    try:
        _log_info("V√©rification des nouveaux r√©sultats au d√©marrage‚Ä¶")
        
        if not ensure_valid_token():
            _log_warn("Token indisponible, v√©rification au d√©marrage ignor√©e")
            return
        
        if epitech_api:
            new_results_at_startup = epitech_api.get_new_results(2025)
        else:
            new_results_at_startup = []
            _log_warn("API non initialis√©e au d√©marrage")
        
        if new_results_at_startup:
            _log_ok(f"{len(new_results_at_startup)} nouveau(x) r√©sultat(s) d√©tect√©(s) au d√©marrage")
            for result in new_results_at_startup:
                await moulibot.send_moulinette_notification(result)
        else:
            _log_ok("Aucun nouveau r√©sultat au d√©marrage")
    except Exception as e:
        _log_warn(f"Erreur lors de la v√©rification au d√©marrage: {e}")
    
    # D√©marrer les t√¢ches automatiques
    check_new_results.start()
    check_token_expiration.start()


@tasks.loop(minutes=5)
async def check_new_results():
    """T√¢che de v√©rification automatique des nouveaux r√©sultats"""
    try:
        _log_info(f"V√©rification automatique - {datetime.now().strftime('%H:%M:%S')}")
        
        # S'assurer que le token est valide avant de v√©rifier
        if not ensure_valid_token():
            _log_warn("Token indisponible, v√©rification ignor√©e")
            return
        
        # V√©rifier les nouveaux r√©sultats
        if epitech_api:
            new_results = epitech_api.get_new_results(2025)
        else:
            _log_warn("API non initialis√©e")
            return
        
        if new_results:
            _log_ok(f"{len(new_results)} nouveau(x) r√©sultat(s) d√©tect√©(s)")
            
            # Envoyer une notification pour chaque nouveau r√©sultat
            for result in new_results:
                await moulibot.send_moulinette_notification(result)
                
        else:
            _log_info("Aucun nouveau r√©sultat d√©tect√©")
            
    except Exception as e:
        _log_error(f"Erreur lors de la v√©rification automatique: {e}")


@check_new_results.before_loop
async def before_check_new_results():
    """Attendre que le bot soit pr√™t avant de commencer la v√©rification"""
    await bot.wait_until_ready()


@tasks.loop(hours=1)
async def check_token_expiration():
    """V√©rification et renouvellement pr√©ventif du token (dur√©e de vie: 1h)"""
    try:
        _log_info(f"V√©rification de l'expiration du token - {datetime.now().strftime('%H:%M:%S')}")
        
        if epitech_api and current_token:
            token_info = epitech_api.get_token_info()
            
            if token_info.get("is_expired", False):
                _log_info("Token expir√© d√©tect√©, renouvellement automatique‚Ä¶")
                ensure_valid_token()
            else:
                _log_ok("Token valide")
        else:
            _log_warn("Aucun token configur√©, tentative de r√©cup√©ration‚Ä¶")
            ensure_valid_token()
            
    except Exception as e:
        _log_error(f"Erreur lors de la v√©rification du token: {e}")


@check_token_expiration.before_loop
async def before_check_token_expiration():
    """Attendre que le bot soit pr√™t avant de commencer la v√©rification des tokens"""
    await bot.wait_until_ready()


# Commande hybride pour la compatibilit√© (optionnelle)
@bot.hybrid_command(name="info", description="‚ÑπÔ∏è Informations sur MouliCord v2.0")
async def info_command(ctx):
    """Commande d'information sur le bot"""
    embed = discord.Embed(
        title="üöÄ MouliCord v2.0",
        description="**Le bot Discord Epitech le plus avanc√© !**\n\n‚ú® **Nouveaut√©s v2.0:**\n‚Ä¢ üéÆ Interface 100% Slash Commands\n‚Ä¢ üì± Composants interactifs modernes\n‚Ä¢ üìã Menus d√©roulants intuitifs\n‚Ä¢ üîÑ Boutons d'actualisation\n‚Ä¢ üìà Navigation historique avanc√©e",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    embed.add_field(
        name="üìä Commandes principales",
        value="‚Ä¢ `/mouli` - Derniers r√©sultats\n‚Ä¢ `/history` - Historique des projets\n‚Ä¢ `/stats` - Statistiques compl√®tes\n‚Ä¢ `/status` - √âtat du syst√®me",
        inline=True
    )
    
    embed.add_field(
        name="üîß Gestion",
        value="‚Ä¢ `/token` - V√©rifier le token\n‚Ä¢ `/refresh_token` - Actualiser\n‚Ä¢ `/backup` - Sauvegarde\n‚Ä¢ `/help` - Guide complet",
        inline=True
    )
    
    embed.add_field(
        name="‚ö° Fonctionnalit√©s",
        value="‚Ä¢ ü§ñ Surveillance 24/7\n‚Ä¢ üîî Notifications @everyone\n‚Ä¢ üíæ Sauvegarde automatique\n‚Ä¢ üõ°Ô∏è Token auto-refresh",
        inline=False
    )
    
    embed.set_footer(text="Utilisez /help pour le guide complet ‚Ä¢ MouliCord v2.0")
    
    await ctx.send(embed=embed)


@bot.hybrid_command(name="test_notification", description="üß™ Tester une notification de moulinette")
async def test_notification_command(ctx):
    """Commande pour tester les notifications de moulinette"""
    try:
        # S'assurer que le token est valide
        if not ensure_valid_token():
            await ctx.send("‚ùå **Erreur:** Token Epitech indisponible")
            return
        
        # R√©cup√©rer le premier r√©sultat pour test
        if epitech_api:
            results = epitech_api.get_moulinette_results(2025)
        else:
            await ctx.send("‚ùå **Erreur:** API non initialis√©e")
            return
        
        if results:
            # Simuler une nouvelle moulinette avec le premier r√©sultat
            test_result = results[0]
            
            await ctx.send("üß™ **Test de notification en cours...**")
            await moulibot.send_moulinette_notification(test_result)
            
            await ctx.send("‚úÖ **Notification de test envoy√©e !**\nV√©rifiez le canal configur√©.")
        else:
            await ctx.send("‚ùå **Aucun r√©sultat disponible pour le test.**")
            
    except Exception as e:
        await ctx.send(f"‚ùå **Erreur lors du test:** {e}")


@bot.hybrid_command(name="force_check", description="üîç Forcer une v√©rification des nouvelles moulinettes")
async def force_check_command(ctx):
    """Commande pour forcer une v√©rification manuelle"""
    try:
        await ctx.send("üîç **V√©rification manuelle en cours...**")
        
        # S'assurer que le token est valide
        if not ensure_valid_token():
            await ctx.send("‚ùå **Erreur:** Token Epitech indisponible")
            return

        if epitech_api:
            new_results = epitech_api.get_new_results(2025)
        else:
            await ctx.send("‚ùå **Erreur:** API non initialis√©e")
            return
            
        if new_results:
            await ctx.send(f"üÜï **{len(new_results)} nouveaux r√©sultats d√©tect√©s !**")
            
            for result in new_results:
                await moulibot.send_moulinette_notification(result)
                
            await ctx.send(f"‚úÖ **{len(new_results)} notifications envoy√©es !**")
        else:
            await ctx.send("üìä **Aucun nouveau r√©sultat d√©tect√©.**\nTous les r√©sultats sont d√©j√† connus.")
            
    except Exception as e:
        await ctx.send(f"‚ùå **Erreur lors de la v√©rification:** {e}")


if __name__ == "__main__":
    try:
        _log_info("D√©marrage de MouliCord v2.0‚Ä¶")
        
        # V√©rification finale avant d√©marrage
        discord_token = os.getenv('DISCORD_BOT_TOKEN')
        if not discord_token:
            _log_error("DISCORD_BOT_TOKEN manquant dans le fichier .env")
            exit(1)
            
        _log_ok("Configuration valid√©e")
        _log_info(f"Canal configur√©: {channel_id}")
        bot.run(discord_token)
        
    except discord.LoginFailure:
        _log_error("Token Discord invalide ! V√©rifiez DISCORD_BOT_TOKEN dans .env")
        print("Astuce: cr√©ez le token sur https://discord.com/developers/applications")
    except ValueError as e:
        _log_error(f"Erreur de configuration: {e}")
        print("Astuce: v√©rifiez que CHANNEL_ID est un nombre valide")
    except Exception as e:
        _log_error(f"Erreur critique au d√©marrage: {e}")
        print("\nVariables requises:")
        print("   ‚Ä¢ DISCORD_BOT_TOKEN (token du bot Discord)")
        print("   ‚Ä¢ CHANNEL_ID (ID num√©rique du canal Discord)")
